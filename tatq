[1mdiff --git a/phototransistor/PhotoTransistor.cpp b/phototransistor/PhotoTransistor.cpp[m
[1mindex 6344a3f..56017bc 100644[m
[1m--- a/phototransistor/PhotoTransistor.cpp[m
[1m+++ b/phototransistor/PhotoTransistor.cpp[m
[36m@@ -10,7 +10,9 @@[m [mnamespace photoTransistor{[m
     PhotoTransistor::PhotoTransistor(IAdc* pAdc, Filter* pFilter):[m
         pAdc_(pAdc),[m
         pFilter_(pFilter)[m
[31m-    {}[m
[32m+[m[32m    {[m
[32m+[m[32m        pAdc_->enable();[m
[32m+[m[32m    }[m
 [m
     void PhotoTransistor::update(){[m
         bool success;[m
[1mdiff --git a/radio/nrf24l01/Nrf24l01.cpp b/radio/nrf24l01/Nrf24l01.cpp[m
[1mindex 5afe8e4..f10345e 100644[m
[1m--- a/radio/nrf24l01/Nrf24l01.cpp[m
[1m+++ b/radio/nrf24l01/Nrf24l01.cpp[m
[36m@@ -399,7 +399,11 @@[m [mnamespace radio[m
     bool Nrf24l01::transmit(uint8_t* buff, uint8_t numBytes)[m
     {[m
         // Must have already called startTransmitting[m
[31m-        if (status_ != RfStatus::TRANSMITTING) return false;[m
[32m+[m[32m        if (status_ != RfStatus::TRANSMITTING)[m
[32m+[m[32m        {[m
[32m+[m[32m            PRINTLN("Wrong rf status.");[m
[32m+[m[32m            return false;[m
[32m+[m[32m        }[m
 [m
         pSpi_->selectSlave();[m
 [m
[36m@@ -422,7 +426,7 @@[m [mnamespace radio[m
         // Pulse CE high to start transmission[m
         pCePin_->set(L_HIGH);[m
         DELAY_MICROSECONDS(150);[m
[31m-         pCePin_->set(L_LOW);[m
[32m+[m[32m        pCePin_->set(L_LOW);[m
 [m
         uint8_t completionMask = (1 << TX_DS) | (1 << MAX_RT);[m
 [m
[36m@@ -436,7 +440,7 @@[m [mnamespace radio[m
 [m
         bool successfull = status & (1 << TX_DS);[m
 [m
[31m-#ifdef DEBUG_RADIO[m
[32m+[m[32m//#ifdef DEBUG_RADIO[m
         if (status & (1 << TX_DS))[m
         {[m
             PRINTLN("Transmission successful!");[m
[36m@@ -449,7 +453,7 @@[m [mnamespace radio[m
         {[m
             PRINTLN("Transmission failed: unknown reason");[m
         }[m
[31m-#endif[m
[32m+[m[32m//#endif[m
 [m
         if (!successfull) flush(); // Drop active transaction on failure[m
 [m
[1mdiff --git a/timer/ATmega328/ATmega328Timer.hpp b/timer/ATmega328/ATmega328Timer.hpp[m
[1mindex c062515..e082429 100644[m
[1m--- a/timer/ATmega328/ATmega328Timer.hpp[m
[1m+++ b/timer/ATmega328/ATmega328Timer.hpp[m
[36m@@ -12,8 +12,10 @@[m [mnamespace timer{[m
     };[m
     [m
     enum TimerMode{[m
[31m-        NORMAL, // Normal counting[m
[31m-        CTC     // Clear Timer on Capture[m
[32m+[m[32m        NORMAL,             // Normal counting[m
[32m+[m[32m        CTC,                // Clear Timer on Capture[m
[32m+[m[32m        FAST_PWM,           // PWM with higher freq, good for power regulation[m
[32m+[m[32m        PHASE_CORRECT_PWM   // PWM with phase shift at center, good for changing PWMs[m
     };[m
 [m
     enum TimerPrescaler: uint8_t[m
